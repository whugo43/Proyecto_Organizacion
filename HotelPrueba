.data 
	menu_title: 		.asciiz		"\n\tHOTEL ESPOL\n"									# Data declaration section
	menu_option_1: 		.asciiz		"\t1. Reservar una habitación\n"
	menu_option_2: 		.asciiz 	"\t2. Pagar reservación\n"
	menu_option_3: 		.asciiz 	"\t3. Cancelar reservación\n"
	menu_option_4: 		.asciiz 	"\t4. Ocupación del hotel\n"
	menu_option_5:		.asciiz		"\t5. Salir\n"
	menu_input_message:	.asciiz 	"Ingrese el número de la habitación (1-50): "
	Default_message: 	.asciiz 	"\tCaso Default"
	input_room:  		.asciiz		"Ingrese el  número de habitación (1-50): "
	invalid_hotel:  	.asciiz		"El hotel seleccionado no existe\n"
	invalid_room:	  	.asciiz		"La habitación seleccionado no existe\n"
	busy_room:  		.asciiz 	"La habitación no se encuentra disponible\n"
	reserved_room:  	.asciiz 	"La habitación ha sido reservado exitosamente!!\n"
	canceled_book:  	.asciiz 	"La habitación ha sido cancelada exitosamente!!\n"
	no_reserved_room:  	.asciiz 	"La habitación no se ha reservado antes!!\n"
	room_price: 		.float 		120.00
	zero: 			.float 		0
	iva: 			.float 		0.12
	iva_text: 		.asciiz 	"IVA: "
	subtotal_text: 		.asciiz 	"Subtotal: "
	total_text: 		.asciiz 	"Total a pagar: "
	new_line: 		.asciiz 	"\n"
	dash:			.asciiz		"-"
	aviable_rooms:		.asciiz		"Habitaciones disponibles: \n"
	reserved_rooms:		.asciiz		"Habitaciones reservadas: \n"
	
	hotel:  		.word  		0:50  			#hotel with 50 free rooms
.text
	main: 								# Start of code section
		la	$s4, hotel
		jal 	print_menu
		
		j 	exit_program
			
	print_menu:	
		addi 	$sp, $sp, -4					########################
									#save the principal $ra#
		sw    	$ra , 0($sp)					########################
		
		li 	$v0, 4 
		la 	$a0, menu_title
		syscall 
		li 	$v0, 4 
		la 	$a0, menu_option_1
		syscall 
		li 	$v0, 4 
		la	$a0, menu_option_2
		syscall 
		li 	$v0, 4 
		la 	$a0, menu_option_3
		syscall 
		li 	$v0, 4 
		la 	$a0, menu_option_4
		syscall
		li 	$v0, 4 
		la 	$a0, menu_option_5
		syscall  
		li 	$v0, 4 
		la 	$a0, menu_input_message
		syscall 
		
		li 	$v0, 5 
		syscall
		move 	$t0, $v0
   
   		beq	$t0, 1, case1
   		beq 	$t0, 2, case2
   		beq 	$t0, 3, case3
   		beq 	$t0, 4, case4
   		beq	$t0, 5, case5
   		j	exit
   
		case1:  
			
			
			la	$a0, input_room				# 
			li	$v0, 4					#ask for the seat number
			syscall						#
			
			jal 	input_int   
			li	$t2 , 50 				
			slt	$t1 , $v0 , $t2
			beq	$t1, 0 , no_valid_room
			
									#read the input				
		    	move	$a0, $v0				#
			
	        	jal	book_room				#book the seat received in $a0 with the selected plane in $s4
		    	
		    	lw    	$ra , 0($sp)				#load the main $ra  to return to the main execution
			j 	print_menu				#go to menu
				
			
			
		case2:
			li	$t3, 0   
			la   	$s4, hotel				#Load the plane in $s4     
			l.s	$f1, zero				#Make $f1 = 0
			l.s	$f2, room_price				#Load the seat price in $f2
			l.s	$f5, iva				#Load the tax in %f5
			move	$t1, $s4
			j	count_rooms				#Start counting the seats that are booked and the proceeds to calculate the total amount to pay
			j	print_menu

   			
		case3:   
				
			
			la	$a0, input_room				# 
			li	$v0, 4					#ask for the seat number
			syscall						#
			
			jal 	input_int   
			li	$t2 , 40 				
			slt	$t1 , $v0 , $t2
			beq	$t1, 0 , no_valid_room
			
									#read the input				
		    	move	$a0, $v0				#
			
	        	jal	cancel_book				#book the seat received in $a0 with the selected plane in $s4
		    	
		    	lw    	$ra , 0($sp)				#load the main $ra  to return to the main execution
			j 	print_menu				#go to menu
				
   			
		case4:  
			li	$t3, 0
			la   	$s4, hotel				#Load the plane in $s4
			move	$t1, $s4				#Move the array to $t1
			li 	$v0, 4 
			la 	$a0, aviable_rooms
			syscall       
			jal	check_aviable_rooms			#Count and print all the aviable seats in the plane
			li 	$v0, 4 
			la 	$a0, new_line
			syscall
			li 	$v0, 4 
			la 	$a0, reserved_rooms
			syscall
			move	$t1, $s4 				#We move $t1 back to the start of the array plane to check the seats again
			li	$t3, 0
			j	check_reserved_rooms			#count and print all the reserved seats in the plane
		
		case5:
			li      $v0, 10             			 # terminate program
    			syscall 


		exit:
  			jr 	$ra	
  			
  			
  			
 	book_room:  							#Receive the seat number x in $ a0  and the plane in $s4
		sll	$a0, $a0, 2					#multiply by 4 
		add	$t1, $a0, $s4					#concatenate 
		li	$t2, 1 						#t2 =1
		lw 	$t3, 0($t1)     				# t3 = plane[x]
		beq	$t3, $t2, room_not_availabe     		#if($t3 ==1 )  
									#else
		sw 	$t2, 0($t1)					#change the value to 1  ==> reserved
		
		la	$a0, reserved_room				#
		li	$v0, 4						#print successful message
		syscall							#
		
		jr 	$ra						#return to case1
		
	cancel_book:  							#Receive the seat number x in $ a0  and the plane in $s4
		sll	$a0, $a0, 2					#multiply by 4 
		add	$t1, $a0, $s4					#concatenate 
		li	$t2, 0						#t2 =0
		lw 	$t3, 0($t1)     				# t3 = plane[x]
		beq	$t3, $t2, room_not_reserved     		#if($t3 ==0 )  
									#else
		sw 	$t2, 0($t1)					#change the value to 0  ==>canceled
		
		la	$a0, canceled_book				#
		li	$v0, 4						#print successful message
		syscall							#
		
		jr 	$ra						#return to case1
		
	room_not_availabe:
		la	$a0, busy_room
		li	$v0, 4
		syscall
		jr 	$ra
		
	room_not_reserved:
		la	$a0, no_reserved_room
		li	$v0, 4
		syscall
		jr 	$ra
		
	no_valid_room:
		la	$a0, invalid_room				
		li	$v0, 4					
		syscall
		j 	print_menu					#go to menu
		
	input_int:    
		li 	$v0, 5 
		syscall 
		jr 	$ra
		
	exit_program:
		li	$v0, 10		  				#exit
		syscall	
		
	count_rooms:
	    	bgt	$t3, 50, print_payment				#Once it finish counting the seats it prints the payment
	    	addi	$t3, $t3, 1
		lw 	$t0, 0($t1)
    		addi	$t1, $t1, 4
		beq 	$t0, 1, sum_room				#if a seat is booked it's added to the subtotal
		j	count_rooms		
	
	sum_room:
		add.s	$f1, $f1, $f2
		j	count_rooms
	
	print_payment:
		mul.s 	$f3, $f1, $f5					#calculate the tax amount based on the subtotal
		add.s	$f4, $f1, $f3					#adds the subtotal and the tax amount to get the total amount to pay
		li 	$v0, 4 
		la 	$a0, iva_text
		syscall
		li 	$v0, 2 
		mov.s  	$f12, $f3
		syscall
		li 	$v0, 4 
		la 	$a0, new_line
		syscall
		li 	$v0, 4 
		la 	$a0, subtotal_text
		syscall
		li 	$v0,  2
		mov.s	$f12, $f1
		syscall
		li 	$v0, 4 
		la 	$a0, new_line
		syscall
		li 	$v0, 4 
		la 	$a0, total_text
		syscall
		li 	$v0, 2 
		mov.s	$f12, $f4
		syscall
		li 	$v0, 4 
		la 	$a0, new_line
		syscall
		j print_menu
		
	check_aviable_rooms:
	    	bgt	$t3, 50, return					#Once it finish counting the seats it goes back to the menu case and then to checking the reserved seats
	    	addi	$t3, $t3, 1
		lw 	$t0, 0($t1)
    		addi	$t1, $t1, 4
		bne 	$t0, 0, check_aviable_rooms			#If a seat is aviable it prints the seat number else it goes back to the loop
		li	$t4, 0
		addi	$t4, $t3, -1
		li 	$v0, 4 
		la 	$a0, dash
		syscall
		li	$v0, 1
		move	$a0, $t4
		syscall
		j	check_aviable_rooms
		
	check_reserved_rooms:
		bgt	$t3, 50, print_menu
	    	addi	$t3, $t3, 1
		lw 	$t0, 0($t1)
    		addi	$t1, $t1, 4
		bne 	$t0, 1, check_reserved_rooms			#if a seat is reserved it prints the seat number else it goes back to the loop
		li	$t4, 0
		addi	$t4, $t3, -1
		li 	$v0, 4 
		la 	$a0, dash
		syscall
		li	$v0, 1
		move	$a0, $t4
		syscall
		j	check_reserved_rooms
	
	return:
		jr 	$ra